import random

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.center = None
        self.right = None
        
    def insertChild(self, data): #logic for entering nodes
        child_type = random.choice(['left', 'center', 'right'])
        if child_type == 'left':
            self.left = Node(data)
            return self.left
        elif child_type == 'center':
            self.center = Node(data)
            return self.center
        else:
            self.right = Node(data)
            return self.right

    
    def treeRandomizer(): 
        values = list(range(10)) #0-9
        random.shuffle(values)
        value_index = 0 #value index for making every node unique

        root = Node(values[value_index])
        value_index += 1 #adds one to the value index to make sure nodes dont repeat

        l2Nodes = [] #randomizes the 2nd level of nodes
        for i in range(random.randint(1, 3)):
            if value_index >= len(values):
                break
            child = root.insertChild(values[value_index])
            l2Nodes.append(child)
            value_index += 1

        l3Nodes = [] #randomizes the 3rd level of nodes
        for parent in l2Nodes:
            for i in range(random.randint(1, 3)):
                if value_index >= len(values):
                    break
                child = parent.insertChild(values[value_index])
                l3Nodes.append(child)
                value_index += 1

        for parent in l3Nodes: #randomizes the last layer of nodes
            for i in range(random.randint(1, 3)):
                if value_index >= len(values):
                    break
                parent.insertChild(values[value_index])
                value_index += 1

        return root

def printTree(node, level=0, prefix="Root: "):
    if node is not None:
        print(" " * (level*4) + prefix + str(node.data))
        if node.left:
            printTree(node.left, level+1, "L--- ")
        if node.center:
            printTree(node.center, level+1, "C--- ")
        if node.right:
            printTree(node.right, level+1, "R--- ")


randomTree = Node.treeRandomizer()
printTree(randomTree)
