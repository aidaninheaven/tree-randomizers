import random

#colors
BLUE = "\033[94m"
RED = "\033[91m"
RESET = "\033[0m"

class Node:
    def __init__(self, data):
        self.data = data
        self.children = []
        self.parent = None

    def addChild(self, data):
        child = Node(data)
        child.parent = self
        self.children.append(child)
        return child

#build tree with one duplicate leaf value on different branches
def buildTreeWithDuplicateLeaf():
    values = list(range(20))
    duplicate = random.choice(values)
    values.remove(duplicate)

    root = Node(random.choice(values))
    values.remove(root.data)

    #level 2
    level2 = [root.addChild(values.pop()) for i in range(3)]

    #level 3
    level3 = []
    for parent in level2:
        for i in range(2):
            level3.append(parent.addChild(values.pop()))

    #insert two duplicate leaves on different level 3 branches
    parentsWithDup = random.sample(level3, 2)
    leaf1 = parentsWithDup[0].addChild(duplicate)
    leaf2 = parentsWithDup[1].addChild(duplicate)

    #fill out remaining leaves with unique values
    leafNodes = [leaf1, leaf2]
    for parent in level3:
        while len(parent.children) < 2 and values:
            leafNodes.append(parent.addChild(values.pop()))

    return root, leaf1, leaf2

#get path from node to root
def getPathToRoot(node):
    path = []
    while node:
        path.append(node)
        node = node.parent
    return path

#print tree, two different color paths
def printTree(node, level=0, prefix="Root: ", paths=[]):
    color = ""
    if node in paths[0]:
        color = BLUE
    elif node in paths[1]:
        color = RED

    print(" " * (level * 4) + color + prefix + str(node.data) + RESET)

    for child in node.children:
        printTree(child, level + 1, "--> ", paths)

# Run the program
treeRoot, leafA, leafB = buildTreeWithDuplicateLeaf()
pathA = set(getPathToRoot(leafA))
pathB = set(getPathToRoot(leafB))

printTree(treeRoot, paths=[pathA, pathB])
