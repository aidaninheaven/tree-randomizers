BLUE = "\033[94m"
RESET = "\033[0m"
import random

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.center = None
        self.right = None
        self.parent = None
        
    def insert_child(self, data):
        child_type = random.choice(['left', 'center', 'right'])
        if child_type == 'left':
            self.left = Node(data)
            self.left.parent = self
            return self.left
        elif child_type == 'center':
            self.center = Node(data)
            self.center.parent = self
            return self.center
        else:
            self.right = Node(data)
            self.right.parent = self
            return self.right

def create_random_tree():
    values = list(range(10)) #creates a list of randomized numbers 0-9
    random.shuffle(values)
    value_index = 0

    root = Node(values[value_index])
    value_index += 1

    level_2_nodes = [] #randomize level 2 nodes
    for i in range(random.randint(1, 3)):
        if value_index >= len(values):
            break
        child = root.insert_child(values[value_index]) #inserts the child into the value index, making sure it cant be repeated
        level_2_nodes.append(child)
        value_index += 1

    level_3_nodes = [] #randomize level 3 nodes
    for parent in level_2_nodes:
        for i in range(random.randint(1, 3)):
            if value_index >= len(values):
                break
            child = parent.insert_child(values[value_index]) #inserts the child into the value index, making sure it cant be repeated
            level_3_nodes.append(child)
            value_index += 1

    leaf_nodes = [] #randomize level 4 nodes
    for parent in level_3_nodes:
        has_child = False
        for i in range(random.randint(1, 3)):
            if value_index >= len(values):
                break
            child = parent.insert_child(values[value_index]) #inserts the child into the value index, making sure it cant be repeated
            leaf_nodes.append(child)
            value_index += 1
            has_child = True
        if not has_child:
            leaf_nodes.append(parent)

    return root, leaf_nodes

def get_path_to_root(node): #creates a list and appends nodes to it depending on the nodes parent until there is no parent (root)
    path = [] 
    while node is not None:
        path.append(node)
        node = node.parent
    return path

def print_tree(node, level=0, prefix="Root: ", highlight_path=None):
    if highlight_path is None:
        highlight_path = set()
    
    if node is not None:
        if node in highlight_path: #highlights the node blue if it is in the highlight path
            print(" " * (level * 4) + BLUE + prefix + str(node.data) + RESET)
        else:
            print(" " * (level * 4) + prefix + str(node.data))
            
        if node.left:
            print_tree(node.left, level + 1, "L--- ", highlight_path)
        if node.center:
            print_tree(node.center, level + 1, "C--- ", highlight_path)
        if node.right:
            print_tree(node.right, level + 1, "R--- ", highlight_path)

#generate tree and get leaf nodes
random_tree, leaf_nodes = create_random_tree()

#select a random leaf node and get its path to root
if leaf_nodes:
    random_leaf = random.choice(leaf_nodes)
    path_to_root = get_path_to_root(random_leaf)
    highlight_path = set(path_to_root)
else:
    highlight_path = set()


print_tree(random_tree, highlight_path=highlight_path)
